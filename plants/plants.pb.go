// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: plants/plants.proto

package plants

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SunLevel int32

const (
	SunLevel_NEVER    SunLevel = 0
	SunLevel_SOME     SunLevel = 1
	SunLevel_INDIRECT SunLevel = 2
	SunLevel_DIRECT   SunLevel = 3
)

// Enum value maps for SunLevel.
var (
	SunLevel_name = map[int32]string{
		0: "NEVER",
		1: "SOME",
		2: "INDIRECT",
		3: "DIRECT",
	}
	SunLevel_value = map[string]int32{
		"NEVER":    0,
		"SOME":     1,
		"INDIRECT": 2,
		"DIRECT":   3,
	}
)

func (x SunLevel) Enum() *SunLevel {
	p := new(SunLevel)
	*p = x
	return p
}

func (x SunLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SunLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_plants_plants_proto_enumTypes[0].Descriptor()
}

func (SunLevel) Type() protoreflect.EnumType {
	return &file_plants_plants_proto_enumTypes[0]
}

func (x SunLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SunLevel.Descriptor instead.
func (SunLevel) EnumDescriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{0}
}

type Size int32

const (
	Size_XSMALL Size = 0
	Size_SMALL  Size = 1
	Size_MEDIUM Size = 2
	Size_LARGE  Size = 3
	Size_XLARGE Size = 4
)

// Enum value maps for Size.
var (
	Size_name = map[int32]string{
		0: "XSMALL",
		1: "SMALL",
		2: "MEDIUM",
		3: "LARGE",
		4: "XLARGE",
	}
	Size_value = map[string]int32{
		"XSMALL": 0,
		"SMALL":  1,
		"MEDIUM": 2,
		"LARGE":  3,
		"XLARGE": 4,
	}
)

func (x Size) Enum() *Size {
	p := new(Size)
	*p = x
	return p
}

func (x Size) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Size) Descriptor() protoreflect.EnumDescriptor {
	return file_plants_plants_proto_enumTypes[1].Descriptor()
}

func (Size) Type() protoreflect.EnumType {
	return &file_plants_plants_proto_enumTypes[1]
}

func (x Size) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Size.Descriptor instead.
func (Size) EnumDescriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{1}
}

type RequestPlant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RequestPlant) Reset() {
	*x = RequestPlant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plants_plants_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPlant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPlant) ProtoMessage() {}

func (x *RequestPlant) ProtoReflect() protoreflect.Message {
	mi := &file_plants_plants_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPlant.ProtoReflect.Descriptor instead.
func (*RequestPlant) Descriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{0}
}

func (x *RequestPlant) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size          Size     `protobuf:"varint,3,opt,name=size,proto3,enum=plants.Size" json:"size,omitempty"`
	WaterSchedule int64    `protobuf:"varint,4,opt,name=waterSchedule,proto3" json:"waterSchedule,omitempty"`
	SunLevel      SunLevel `protobuf:"varint,5,opt,name=sunLevel,proto3,enum=plants.SunLevel" json:"sunLevel,omitempty"`
	Notes         string   `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
	IsPetSafe     bool     `protobuf:"varint,7,opt,name=isPetSafe,proto3" json:"isPetSafe,omitempty"`
	Food          int64    `protobuf:"varint,8,opt,name=food,proto3" json:"food,omitempty"`
	ShouldMist    bool     `protobuf:"varint,9,opt,name=shouldMist,proto3" json:"shouldMist,omitempty"`
}

func (x *Plant) Reset() {
	*x = Plant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plants_plants_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plant) ProtoMessage() {}

func (x *Plant) ProtoReflect() protoreflect.Message {
	mi := &file_plants_plants_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plant.ProtoReflect.Descriptor instead.
func (*Plant) Descriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{1}
}

func (x *Plant) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Plant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plant) GetSize() Size {
	if x != nil {
		return x.Size
	}
	return Size_XSMALL
}

func (x *Plant) GetWaterSchedule() int64 {
	if x != nil {
		return x.WaterSchedule
	}
	return 0
}

func (x *Plant) GetSunLevel() SunLevel {
	if x != nil {
		return x.SunLevel
	}
	return SunLevel_NEVER
}

func (x *Plant) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Plant) GetIsPetSafe() bool {
	if x != nil {
		return x.IsPetSafe
	}
	return false
}

func (x *Plant) GetFood() int64 {
	if x != nil {
		return x.Food
	}
	return 0
}

func (x *Plant) GetShouldMist() bool {
	if x != nil {
		return x.ShouldMist
	}
	return false
}

type Plants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog []*Plant `protobuf:"bytes,1,rep,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *Plants) Reset() {
	*x = Plants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plants_plants_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plants) ProtoMessage() {}

func (x *Plants) ProtoReflect() protoreflect.Message {
	mi := &file_plants_plants_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plants.ProtoReflect.Descriptor instead.
func (*Plants) Descriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{2}
}

func (x *Plants) GetCatalog() []*Plant {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plants_plants_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plants_plants_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{3}
}

type Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Feedback) Reset() {
	*x = Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plants_plants_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feedback) ProtoMessage() {}

func (x *Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_plants_plants_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feedback.ProtoReflect.Descriptor instead.
func (*Feedback) Descriptor() ([]byte, []int) {
	return file_plants_plants_proto_rawDescGZIP(), []int{4}
}

func (x *Feedback) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Feedback) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_plants_plants_proto protoreflect.FileDescriptor

var file_plants_plants_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x1e, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x89, 0x02,
	0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x75, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x75, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x73, 0x75, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x65, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x65,
	0x74, 0x53, 0x61, 0x66, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x4d, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x39, 0x0a, 0x08, 0x53, 0x75, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03,
	0x2a, 0x40, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x53, 0x4d, 0x41,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x04, 0x32, 0x8d, 0x02, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x12, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22,
	0x00, 0x12, 0x2f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plants_plants_proto_rawDescOnce sync.Once
	file_plants_plants_proto_rawDescData = file_plants_plants_proto_rawDesc
)

func file_plants_plants_proto_rawDescGZIP() []byte {
	file_plants_plants_proto_rawDescOnce.Do(func() {
		file_plants_plants_proto_rawDescData = protoimpl.X.CompressGZIP(file_plants_plants_proto_rawDescData)
	})
	return file_plants_plants_proto_rawDescData
}

var file_plants_plants_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_plants_plants_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_plants_plants_proto_goTypes = []interface{}{
	(SunLevel)(0),        // 0: plants.SunLevel
	(Size)(0),            // 1: plants.Size
	(*RequestPlant)(nil), // 2: plants.RequestPlant
	(*Plant)(nil),        // 3: plants.Plant
	(*Plants)(nil),       // 4: plants.Plants
	(*Empty)(nil),        // 5: plants.Empty
	(*Feedback)(nil),     // 6: plants.Feedback
}
var file_plants_plants_proto_depIdxs = []int32{
	1, // 0: plants.Plant.size:type_name -> plants.Size
	0, // 1: plants.Plant.sunLevel:type_name -> plants.SunLevel
	3, // 2: plants.Plants.catalog:type_name -> plants.Plant
	2, // 3: plants.PlantsService.GetPlant:input_type -> plants.RequestPlant
	3, // 4: plants.PlantsService.AddPlant:input_type -> plants.Plant
	3, // 5: plants.PlantsService.UpdatePlant:input_type -> plants.Plant
	2, // 6: plants.PlantsService.DeletePlant:input_type -> plants.RequestPlant
	5, // 7: plants.PlantsService.GetAllPlants:input_type -> plants.Empty
	3, // 8: plants.PlantsService.GetPlant:output_type -> plants.Plant
	6, // 9: plants.PlantsService.AddPlant:output_type -> plants.Feedback
	6, // 10: plants.PlantsService.UpdatePlant:output_type -> plants.Feedback
	6, // 11: plants.PlantsService.DeletePlant:output_type -> plants.Feedback
	4, // 12: plants.PlantsService.GetAllPlants:output_type -> plants.Plants
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_plants_plants_proto_init() }
func file_plants_plants_proto_init() {
	if File_plants_plants_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plants_plants_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPlant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plants_plants_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plants_plants_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plants_plants_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plants_plants_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plants_plants_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plants_plants_proto_goTypes,
		DependencyIndexes: file_plants_plants_proto_depIdxs,
		EnumInfos:         file_plants_plants_proto_enumTypes,
		MessageInfos:      file_plants_plants_proto_msgTypes,
	}.Build()
	File_plants_plants_proto = out.File
	file_plants_plants_proto_rawDesc = nil
	file_plants_plants_proto_goTypes = nil
	file_plants_plants_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlantsServiceClient is the client API for PlantsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlantsServiceClient interface {
	GetPlant(ctx context.Context, in *RequestPlant, opts ...grpc.CallOption) (*Plant, error)
	AddPlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*Feedback, error)
	UpdatePlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*Feedback, error)
	DeletePlant(ctx context.Context, in *RequestPlant, opts ...grpc.CallOption) (*Feedback, error)
	GetAllPlants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Plants, error)
}

type plantsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantsServiceClient(cc grpc.ClientConnInterface) PlantsServiceClient {
	return &plantsServiceClient{cc}
}

func (c *plantsServiceClient) GetPlant(ctx context.Context, in *RequestPlant, opts ...grpc.CallOption) (*Plant, error) {
	out := new(Plant)
	err := c.cc.Invoke(ctx, "/plants.PlantsService/GetPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) AddPlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*Feedback, error) {
	out := new(Feedback)
	err := c.cc.Invoke(ctx, "/plants.PlantsService/AddPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) UpdatePlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*Feedback, error) {
	out := new(Feedback)
	err := c.cc.Invoke(ctx, "/plants.PlantsService/UpdatePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) DeletePlant(ctx context.Context, in *RequestPlant, opts ...grpc.CallOption) (*Feedback, error) {
	out := new(Feedback)
	err := c.cc.Invoke(ctx, "/plants.PlantsService/DeletePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsServiceClient) GetAllPlants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Plants, error) {
	out := new(Plants)
	err := c.cc.Invoke(ctx, "/plants.PlantsService/GetAllPlants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantsServiceServer is the server API for PlantsService service.
type PlantsServiceServer interface {
	GetPlant(context.Context, *RequestPlant) (*Plant, error)
	AddPlant(context.Context, *Plant) (*Feedback, error)
	UpdatePlant(context.Context, *Plant) (*Feedback, error)
	DeletePlant(context.Context, *RequestPlant) (*Feedback, error)
	GetAllPlants(context.Context, *Empty) (*Plants, error)
}

// UnimplementedPlantsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPlantsServiceServer struct {
}

func (*UnimplementedPlantsServiceServer) GetPlant(context.Context, *RequestPlant) (*Plant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlant not implemented")
}
func (*UnimplementedPlantsServiceServer) AddPlant(context.Context, *Plant) (*Feedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlant not implemented")
}
func (*UnimplementedPlantsServiceServer) UpdatePlant(context.Context, *Plant) (*Feedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlant not implemented")
}
func (*UnimplementedPlantsServiceServer) DeletePlant(context.Context, *RequestPlant) (*Feedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlant not implemented")
}
func (*UnimplementedPlantsServiceServer) GetAllPlants(context.Context, *Empty) (*Plants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPlants not implemented")
}

func RegisterPlantsServiceServer(s *grpc.Server, srv PlantsServiceServer) {
	s.RegisterService(&_PlantsService_serviceDesc, srv)
}

func _PlantsService_GetPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPlant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).GetPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantsService/GetPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).GetPlant(ctx, req.(*RequestPlant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_AddPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).AddPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantsService/AddPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).AddPlant(ctx, req.(*Plant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_UpdatePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).UpdatePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantsService/UpdatePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).UpdatePlant(ctx, req.(*Plant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_DeletePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPlant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).DeletePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantsService/DeletePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).DeletePlant(ctx, req.(*RequestPlant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsService_GetAllPlants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServiceServer).GetAllPlants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantsService/GetAllPlants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServiceServer).GetAllPlants(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlantsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plants.PlantsService",
	HandlerType: (*PlantsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlant",
			Handler:    _PlantsService_GetPlant_Handler,
		},
		{
			MethodName: "AddPlant",
			Handler:    _PlantsService_AddPlant_Handler,
		},
		{
			MethodName: "UpdatePlant",
			Handler:    _PlantsService_UpdatePlant_Handler,
		},
		{
			MethodName: "DeletePlant",
			Handler:    _PlantsService_DeletePlant_Handler,
		},
		{
			MethodName: "GetAllPlants",
			Handler:    _PlantsService_GetAllPlants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plants/plants.proto",
}
